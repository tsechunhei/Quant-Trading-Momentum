# -*- coding: utf-8 -*-
"""Fina4359 project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U8giDBZbXjJ2wawr_rUWtaaXR_KDs0ry
"""

pip install Cython

pip install --upgrade git+https://github.com/statsmodels/statsmodels

pip install stargazer

import statsmodels.api as smf
import statsmodels.formula.api as sm
from statsmodels.regression.rolling import RollingOLS
import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
import scipy as sp

def end_of_month(x):
    if not isinstance(x, str):
        return x
    return str(pd.to_datetime(x) + pd.tseries.offsets.MonthEnd(0))[:10]

msf = pd.read_parquet('msf.parquet',columns = ['permno', 'date', 'prc', 'shrout', 'hexcd', 'ret'])
msf = msf.loc[msf['date'] > '1964-12-31']
msf = msf[msf['hexcd'].isin(set([1,2,3]))]
msf = msf.assign(end_of_month = lambda df: df['date'].apply(end_of_month))

four_factor_monthly = pd.read_parquet('four_factor_monthly.parquet')
four_factor_monthly = four_factor_monthly.loc[four_factor_monthly['dt'] > '1964-12-31']
four_factor_monthly = four_factor_monthly.assign(end_of_month = lambda df: df['dt'].apply(end_of_month)) #Sample period starts from 1965

merge = pd.merge(msf, four_factor_monthly, on = 'end_of_month')
merge = merge.sort_values(['permno', 'date']).reset_index(drop=True)
merge['ret_rf'] = merge['ret'] - merge['rf']
merge['market_cap'] = abs(merge['prc'] * merge['shrout'])

len(merge)

"""Rolling Regression for each permno

"""

container = pd.read_parquet('coeff.parquet')
merge[['constant', 'beta']] = container 
merge['residual'] = merge['ret_rf'] - merge['constant'] - merge['beta']*merge['mkt_rf']

#empty dataframe to hold the coefficients
#It is essentially a grouped rolling regression with window = 36 months 
container = pd.DataFrame(columns = ['const', 'mkt_rf'])
for i in range (10000, int(merge['permno'].max())+1):
  temp = merge.loc[merge['permno'] == i]
  if temp.shape[0] <36:
    pass
  else:
    fit = RollingOLS(temp['ret_rf'], smf.add_constant(temp['mkt_rf']), window = 36).fit()
    params = fit.params
    container = container.append(params)
  
merge[['constant', 'beta']] = container 
merge['residual'] = merge['ret_rf'] - merge['constant'] - merge['beta']*merge['mkt_rf']

"""Create Lag variables"""

merge['market_cap_lag1'] = merge.groupby(['permno'])['market_cap'].shift(1)
merge['ret_lag1'] = merge.groupby(['permno'])['ret'].shift(1)
merge['prc_lag1'] = merge.groupby(['permno'])['prc'].shift(1).abs()
merge['prc_lag13'] = merge.groupby(['permno'])['prc'].shift(13).abs()

"""Calculate Rolling Return"""

# Rolling Residual
def rolling_prod(a, n=11) :
    ret = np.cumprod(a.values)
    ret[n:] = ret[n:] / ret[:-n]
    ret[:n-1] = np.nan
    return pd.Series(ret, index=a.index)

merge['rolling_residual_11_months'] = (
    merge
    .assign(ret=(merge['residual'].fillna(0)+1))
    .groupby('permno')['ret']
    .apply(rolling_prod)
) - 1

#Rolling Return
def rolling_prod(a, n=11) :
    ret = np.cumprod(a.values)
    ret[n:] = ret[n:] / ret[:-n]
    ret[:n-1] = np.nan
    return pd.Series(ret, index=a.index)

merge['rolling_return_11_months'] = (
    merge
    .assign(ret=(merge['ret'].fillna(0)+1))
    .groupby('permno')['ret']
    .apply(rolling_prod)
) - 1

"""Need a full previous year of data As required by the author"""

merge['rollvalidobs'] = (
    merge
    .assign(ret=merge['residual'].notnull())
    .groupby('permno')['ret']
    .rolling(12)
    .sum()
).reset_index([0], drop=True)

merge['rollvalidobs_lag1'] = merge.groupby(['permno'])['rollvalidobs'].shift(1)

"""Ordinary Momentum and Residual Momentum"""

merge['Momentum'] = merge.groupby('permno')['rolling_return_11_months'].shift(2)
merge['Residual_Momentum'] = merge.groupby('permno')['rolling_residual_11_months'].shift(2)

"""Apply all the requirement and filtering: """

merge2 = merge[
    (
        merge['Momentum'].notnull() &
        merge['Residual_Momentum'].notnull() & 
        merge['ret'].notnull() &          
        merge['market_cap_lag1'].notnull() &    
        merge['prc_lag13'].notnull() & 
        (merge['rollvalidobs_lag1'] == 12) &    
        merge['prc_lag13'].notnull()     
    )
].copy().reset_index(drop=True)

"""TEST"""

len(merge2)

"""Apply quantiles"""

def apply_quantiles(x, include_in_quantiles=None, bins=5):
    
    if include_in_quantiles is None:
        include_in_quantiles = [True] * len(x)
        
    x = pd.Series(x)
    quantiles = np.quantile(
        x[x.notnull() & include_in_quantiles],
        np.linspace(0, 1, bins+1)
    )
    quantiles[0] = x.min() - 1
    quantiles[-1] = x.max() + 1
    
    return pd.cut(x, quantiles, labels=False) + 1

"""Delete null value"""

merge2 = merge2[merge2.Residual_Momentum.notnull()]

"""Construct bins"""

merge2['bin'] = (
    merge2
    .groupby('date')
    .apply(lambda group: apply_quantiles(group['Residual_Momentum'], bins=5, include_in_quantiles=(group['hexcd']==1)))
).reset_index(level=[0], drop=True).sort_index()

"""Construct portfolio return"""

portfolios = (
    merge2
    .groupby(['date', 'bin'])
    .apply(
        lambda g: pd.Series({
            'portfolio_ew': g['ret_rf'].mean(),
            'portfolio_vw': (g['ret_rf'] * g['market_cap_lag1']).sum() / g['market_cap_lag1'].sum()
        })
    )
).reset_index()

portfolios.head()

"""Winners minus losers portfolio"""

portfolios2 = pd.merge(
    portfolios.query('bin==5'),
    portfolios.query('bin==1'),
    suffixes=['_long', '_short'],
    on='date'
)

portfolios2['strategy_ew'] = portfolios2['portfolio_ew_long'] - portfolios2['portfolio_ew_short']
portfolios2['strategy_vw'] = portfolios2['portfolio_vw_long'] - portfolios2['portfolio_vw_short']

portfolios2.head()

"""Benchmark on Fama French and CAPM Model"""

EW_1_fit = sm.ols('strategy_ew ~ 1 + mkt_rf', data=pd.merge(four_factor_monthly, portfolios2, on='end_of_month')).fit()
EW_1 = EW_2_fit.params


EW_2_fit = sm.ols('strategy_ew ~ 1 + mkt_rf + smb + hml', data=pd.merge(four_factor_monthly, portfolios2, on='end_of_month')).fit()
EW_2 = EW_2_fit.params


EW_3_fit = sm.ols('strategy_ew ~ 1 + mkt_rf + smb + hml + Mom', data=pd.merge(four_factor_monthly, portfolios2, on='end_of_month')).fit()
EW_3 = EW_3_fit.params


VW_1_fit = sm.ols('strategy_vw ~ 1 + mkt_rf', data=pd.merge(four_factor_monthly, portfolios2, on='end_of_month')).fit()
VW_1 = VW_1_fit.params


VW_2_fit = sm.ols('strategy_vw ~ 1 + mkt_rf + smb + hml', data=pd.merge(four_factor_monthly, portfolios2, on='end_of_month')).fit()
VW_2 = VW_2_fit.params


VW_3_fit = sm.ols('strategy_vw ~ 1 + mkt_rf + smb + hml + Mom', data=pd.merge(four_factor_monthly, portfolios2, on='end_of_month')).fit()
VW_3 = VW_3_fit.params

test = sm.ols('strategy_vw ~ 1 + Mom', data=pd.merge(four_factor_monthly, portfolios2, on='end_of_month')).fit()

portfolios3 = pd.merge(portfolios2, five_factor_monthly, on = 'end_of_month')

mkt_rf = sm.ols('strategy_ew ~ 1 + mkt_rf', data=portfolios3).fit()

hml = sm.ols('strategy_ew ~ 1 + hml', data=portfolios3).fit()

smb = sm.ols('strategy_ew ~ 1 + smb', data=portfolios3).fit()


cma = sm.ols('strategy_ew ~ 1 + cma', data=portfolios3).fit()

rmw = sm.ols('strategy_ew ~ 1+ rmw', data=portfolios3).fit()

print(smf.iolib.summary2.summary_col([mkt_rf,hml,smb,cma,rmw,test], stars = True))

print(smf.iolib.summary2.summary_col([EW_1_fit,EW_2_fit,EW_3_fit,VW_1_fit,VW_2_fit,VW_3_fit], stars = True))

"""Sharpe ratios"""

def sharpe(x):
    return x.mean() / x.std()
sharpe_vw = sharpe(portfolios2['strategy_vw'])
print('annualized value-weighted sharpe ratio {}'.format(sharpe_vw * 12**0.5))
sharpe_ew = sharpe(portfolios2['strategy_ew'])
print('annualized equal-weighted sharpe ratio {}'.format(sharpe_ew * 12**0.5))

"""Plot a value-weighted cumulative return"""

plt.rcParams["figure.figsize"] = (10,7)
portfolios2 = portfolios2.sort_values('date') 
portfolios2['cum_vw'] = (portfolios2['strategy_vw'] + 1).cumprod() - 1
portfolios2['cum_ew'] = (portfolios2['strategy_ew'] + 1).cumprod() - 1
(
    portfolios2
    .assign(date=pd.to_datetime(portfolios2['date']))
    .assign(cum_vw=portfolios2['cum_vw']+1)
    .assign(cum_ew=portfolios2['cum_ew']+1)
    .plot(x='date', y=['cum_vw','cum_ew'] , logy=True).grid(axis='y')
)

"""Five Factor Model

"""

five_factor_monthly = five_factor_monthly.assign(end_of_month = lambda df: df['dt'].apply(end_of_month))